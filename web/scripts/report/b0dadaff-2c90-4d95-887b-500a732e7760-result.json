{"name": "test_login[-123456-8888]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <scripts.test_pytest_login.TestLogin object at 0x0000023B21D9D6F0>\nusername = '', password = '123456', verify_code = '8888'\n\n    @pytest.mark.parametrize(\"username, password, verify_code\", login_test_data)\n    def test_login(self, username, password, verify_code):\n        # 用户名\n        self.driver.find_element(By.ID, \"username\").send_keys(username)\n    \n        # 密码\n        self.driver.find_element(By.ID, \"password\").send_keys(password)\n    \n        # 验证码\n        self.driver.find_element(By.ID, \"verify_code\").send_keys(verify_code)\n    \n        # 点击登录\n        self.driver.find_element(By.NAME, \"sbtbutton\").click()\n>       WebDriverWait(self.driver, 10).until(EC.url_to_be(\"http://192.168.249.129/index.php/Home/User/index.html\"))\n\ntest_pytest_login.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"107eefd595d33c8343168f24c100a1aa\")>\nmethod = <function url_to_be.<locals>._predicate at 0x0000023B219B0AF0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nE:\\SoftWare\\Python3.10\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "parameters": [{"name": "username", "value": "''"}, {"name": "password", "value": "'123456'"}, {"name": "verify_code", "value": "'8888'"}], "start": 1721231249684, "stop": 1721231260010, "uuid": "906e8bfa-06ae-40ac-8457-0d4d101a1312", "historyId": "1bc0a6560211a0a3e8343b484357329d", "testCaseId": "271a2d32072a5453558e7527f142fa03", "fullName": "scripts.test_pytest_login.TestLogin#test_login", "labels": [{"name": "parentSuite", "value": "scripts"}, {"name": "suite", "value": "test_pytest_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Lin"}, {"name": "thread", "value": "28372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "scripts.test_pytest_login"}]}